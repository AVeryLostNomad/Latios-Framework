//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Collider.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Mathematics;

namespace Latios.PhysicsEngine
{
    public unsafe partial struct Collider : IComponentData, ICollider
	{
		#region TypeCasting
		public unsafe static implicit operator Collider(SphereCollider sphereCollider)
        {
            Collider collider = default;
            collider.m_type   = ColliderType.Sphere;
            UnsafeUtility.CopyStructureToPtr(ref sphereCollider, &collider.m_storage);
            return collider;
        }

        public unsafe static implicit operator SphereCollider(Collider collider)
        {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
            if (collider.m_type != ColliderType.Sphere)
                throw new InvalidOperationException("Error: Collider is not a ConvexCollider but is being casted to one.");
#endif

            SphereCollider sphere = default;
            UnsafeUtility.CopyPtrToStructure(&collider.m_storage, out sphere);
            return sphere;
        }

		public unsafe static implicit operator Collider(CapsuleCollider capsuleCollider)
        {
            Collider collider = default;
            collider.m_type   = ColliderType.Capsule;
            UnsafeUtility.CopyStructureToPtr(ref capsuleCollider, &collider.m_storage);
            return collider;
        }

        public unsafe static implicit operator CapsuleCollider(Collider collider)
        {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
            if (collider.m_type != ColliderType.Capsule)
                throw new InvalidOperationException("Error: Collider is not a ConvexCollider but is being casted to one.");
#endif

            CapsuleCollider capsule = default;
            UnsafeUtility.CopyPtrToStructure(&collider.m_storage, out capsule);
            return capsule;
        }

		#endregion TypeCasting

		#region ICollider		
		public AABB CalculateAABB(RigidTransform transform)
        {
            switch (m_type)
            {
				case ColliderType.Sphere:
                    SphereCollider sphere = this;
                    return sphere.CalculateAABB(transform);
				case ColliderType.Capsule:
                    CapsuleCollider capsule = this;
                    return capsule.CalculateAABB(transform);
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public GjkSupportPoint GetSupportPoint(float3 direction)
        {
            switch (m_type)
            {
				case ColliderType.Sphere:
                    SphereCollider sphere = this;
                    return sphere.GetSupportPoint(direction);
				case ColliderType.Capsule:
                    CapsuleCollider capsule = this;
                    return capsule.GetSupportPoint(direction);
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public GjkSupportPoint GetSupportPoint(float3 direction, RigidTransform bInASpace)
        {
            switch (m_type)
            {
				case ColliderType.Sphere:
                    SphereCollider sphere = this;
                    return sphere.GetSupportPoint(direction, bInASpace);
				case ColliderType.Capsule:
                    CapsuleCollider capsule = this;
                    return capsule.GetSupportPoint(direction, bInASpace);
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public float3 GetPointBySupportIndex(int index)
        {
            switch (m_type)
            {
				case ColliderType.Sphere:
                    SphereCollider sphere = this;
                    return sphere.GetPointBySupportIndex(index);
				case ColliderType.Capsule:
                    CapsuleCollider capsule = this;
                    return capsule.GetPointBySupportIndex(index);
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public AABB GetSupportAabb()
        {
            switch (m_type)
            {
				case ColliderType.Sphere:
                    SphereCollider sphere = this;
                    return sphere.GetSupportAabb();
				case ColliderType.Capsule:
                    CapsuleCollider capsule = this;
                    return capsule.GetSupportAabb();
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		#endregion ICollider
	}
}